@page "/Documentlist"
@rendermode InteractiveServer

@inject IJSRuntime JS
@inject HttpClient Http

@using System.Diagnostics.CodeAnalysis
@using XcaXds.Commons.Models.Custom
@using XcaXds.Frontend.Components.UserInterface
@using XcaXds.Frontend.Components.EbRimComponents
@using XcaXds.Frontend.Components.EbRimComponents.SoapEnvelope
@using XcaXds.Commons.Models.Soap.XdsTypes
@using XcaXds.Commons.Models.Soap
@using XcaXds.Commons.Services
@using XcaXds.Commons
@using XcaXds.Commons.Models
@using BlazorBootstrap.Components
@using BlazorBootstrap

<PageTitle>Document List</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1><Icon Name="IconName.FileEarmarkText" /> Document Registry Query</h1>
            <p class="text-muted">Search and retrieve documents from the XDS Document Registry</p>
        </div>
    </div>

    <Toasts class="p-3" Messages="messages" />
    <ConfirmDialog @ref="confirmDialog" />
    <Modal @ref="stackTraceModal" title="Error Details" Size="ModalSize.Large">
        <BodyTemplate>
            <div class="alert alert-danger mb-3">
                <strong>@modalException.Source</strong>
                <p>@modalException.Message</p>
            </div>
            <div class="border p-3 bg-light">
                <code class="d-block" style="white-space: pre-wrap;">@modalException.StackTrace</code>
            </div>
        </BodyTemplate>
    </Modal>

    <div class="row mb-4">
        <div class="col">
            <Card>
                <CardHeader>
                    <Icon Name="IconName.Server" /> Registry Endpoint
                </CardHeader>
                <CardBody>
                    <div class="input-group">
                        <span class="input-group-text"><Icon Name="IconName.Link45Deg" /></span>
                        <TextInput @ref="inputBackendUrl" @bind-Value="@backendUrl" 
                            Placeholder="https://localhost:7176/Registry/services/RegistryService"
                            Class="form-control" />
                    </div>
                </CardBody>
            </Card>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <Card>
                <CardHeader>
                    <Icon Name="IconName.Search" /> Query Parameters
                </CardHeader>
                <CardBody>
                    <ResizeablePane InitWidth="30%" MinWidth="200px">
                        <LeftContent>
                            <Card Style="height: 100% !important; background-color: white;" Class="h-100">
                                <CardHeader>
                                    <Icon Name="IconName.Sliders" /> Query Options
                                </CardHeader>
                                <CardBody Class="p-3">
                                    <div class="mb-3">
                                        <label class="form-label">Response Type</label>
                                        <Dropdown Style="width: 100%" Color="DropdownColor.Secondary">
                                            <DropdownToggleButton>
                                                <Icon Name="IconName.ArrowReturnRight" /> @(returnType.ToString() ?? "Response Option")
                                            </DropdownToggleButton>
                                            <DropdownMenu>
                                                <DropdownItem Type="DropdownItemType.Link" @onclick='() => returnType = ResponseOptionTypeReturnType.LeafClass'>
                                                    <span class="me-2"><Icon Name="IconName.Diagram3" /></span> LeafClass
                                                </DropdownItem>
                                                <DropdownItem Type="DropdownItemType.Link" @onclick='() => returnType = ResponseOptionTypeReturnType.ObjectRef'>
                                                    <span class="me-2"><Icon Name="IconName.Link" /></span> ObjectRef
                                                </DropdownItem>
                                            </DropdownMenu>
                                        </Dropdown>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Query Type</label>
                                        <Dropdown Style="width: 100%" Color="DropdownColor.Secondary">
                                            <DropdownToggleButton>
                                                <Icon Name="IconName.FileEarmark" /> @(adhocQueryInput.Key ?? "Select Stored Query type...")
                                            </DropdownToggleButton>
                                            <DropdownMenu Style="max-height: 300px; overflow-y: auto;">
                                                <DropdownItem Type="DropdownItemType.Link" @onclick='() => adhocQueryInput = new()'>
                                                    <span class="me-2"><Icon Name="IconName.Trash" /></span> None
                                                </DropdownItem>
                                                <DropdownDivider />
                                                @foreach (var queryType in storedQueryTypes)
                                                {
                                                    <DropdownItem Type="DropdownItemType.Link" @onclick='() => adhocQueryInput = queryType'>
                                                        <span class="me-2"><Icon Name="IconName.FileEarmarkCode" /></span> @queryType.Key
                                                        <small class="d-block text-muted">@queryType.Value</small>
                                                    </DropdownItem>
                                                }
                                            </DropdownMenu>
                                        </Dropdown>
                                    </div>

                                    <hr />

                                    @if (adhocQueryInput.Key is not null)
                                    {
                                        EnterDefaultValuesBasedOnAdhocQuery(adhocQueryInput.Value);
                                        <div class="mb-3">
                                            <label class="form-label">Query Parameters</label>
                                            <div class="border rounded p-3 bg-light">
                                                <KeyValuePairComponent 
                                                    KeyValuePairs="keyValuePairs" 
                                                    OnKeyValuePairsChanged=@OnKeyValuePairsChanged 
                                                    DataProvider=@ProvideSlotQueryParametersDataProvider />
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="alert alert-info">
                                            <Icon Name="IconName.InfoCircle" /> Select a query type to see available parameters
                                        </div>
                                    }

                                    <hr />
                                    <Button @onclick=CreateSoapEnvelopeWithVariables 
                                           Style="width: 100%" 
                                           Color="ButtonColor.Success">
                                        <Icon Name="IconName.CodeSquare" /> Generate Request
                                    </Button>
                                </CardBody>
                            </Card>
                        </LeftContent>
                        <RightContent>
                            <Card Style="height: 100%; background-color: white;">
                                <CardHeader>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span><Icon Name="IconName.EnvelopeAt" /> SOAP Request</span>
                                    </div>
                                </CardHeader>
                                <CardBody Class="p-0 h-100">
                                    <StandaloneCodeEditor @ref="_editor" 
                                                        Id="xds-query-editor" 
                                                        CssClass="" 
                                                        ConstructionOptions="EditorConstructionOptions"
                                                        OnDidInit="EditorOnDidInit" />
                                </CardBody>
                            </Card>
                        </RightContent>
                    </ResizeablePane>
                </CardBody>
            </Card>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <Button @ref="sendRequestButton" 
                   Class="btn btn-primary btn-lg" 
                   @onclick="SendRegistryStoredQuerySoapRequest">
                <Icon Name="IconName.Send" /> Send Query
            </Button>
        </div>
    </div>

    @if (ResponseEnvelope is not null)
    {
        <div class="row mb-5">
            <div class="col">
                <Card>
                    <CardHeader>
                        <Icon Name="IconName.FileEarmarkText" /> Query Results
                    </CardHeader>
                    <CardBody Class="p-0">
                        <DocumentListComponent adhocQueryResponse=ResponseEnvelope.Body.AdhocQueryResponse 
                                             OnDocumentReferenceClicked="@OpenNewPageRetrieveDocumentSetSoapRequest" />
                    </CardBody>
                </Card>
            </div>
        </div>
    }
</div>

@code {
    // User input/output
    private string backendUrl;
    private string requestMessage;
    private SoapEnvelope ResponseEnvelope;
    private SoapXmlSerializer sxmls = new(XmlSettings.Soap);
    private ResponseOptionTypeReturnType returnType;
    private string storedQueryQueryType;
    private HttpResponseMessage soapRequestResponse;

    // Slot Autocomplete
    private string? slotName;
    private List<KeyValueEntry>? userInputSlots;
    private List<KeyValueEntry>? slotQueryParameters;

    // AdhocQuery types
    private string currentAdhocQuery;
    private KeyValuePair<string, string> adhocQueryInput = new();
    private Dictionary<string, string> storedQueryTypes = typeof(Constants.Xds.StoredQueries).GetAsDictionary();

    // BootstrapBlazor UI components
    private Button sendRequestButton = default!;
    private List<ToastMessage> messages = new();
    private Modal stackTraceModal = default!;
    private Exception modalException = new();
    private List<KeyValueEntry> keyValuePairs = [new() { } ];
    private ConfirmDialog confirmDialog = new();
    private TextInput inputBackendUrl = new();

    // Monaco Editor configuration
    [AllowNull]
    private StandaloneCodeEditor _editor;


    protected override void OnInitialized()
    {
        // Set default return type
        returnType = ResponseOptionTypeReturnType.LeafClass;
    }

    private async Task CreateSoapEnvelopeWithVariables()
    {
        var currentContent = await _editor.GetValue();
        if (!string.IsNullOrEmpty(currentContent) && currentContent != requestMessage)
        {
            var confirmation = await confirmDialog.ShowAsync(
            title: "Existing Content Will Be Replaced",
            message1: "This will overwrite the current editor content. This action cannot be undone.",
            message2: "Do you want to proceed?");

            if (!confirmation)
            {
                return;
            }
        }
        
        var soapEnvelope = new SoapEnvelope()
        {
            Header = new()
            {
                Action = Constants.Xds.OperationContract.Iti18Action,
                MessageId = Guid.NewGuid().ToString(),
                To = backendUrl ?? inputBackendUrl.Placeholder
            },
            Body = new()
            {
                AdhocQueryRequest = new()
                {
                    ResponseOption = new() { ReturnType = returnType },
                    AdhocQuery = new()
                    {
                        Id = adhocQueryInput.Value
                    }
                }
            }
        };

        foreach (var pair in keyValuePairs)
        {
            if (string.IsNullOrEmpty(pair.Key) || string.IsNullOrEmpty(pair.Value))
            {
                continue;
            }

            soapEnvelope.Body.AdhocQueryRequest.AdhocQuery.AddSlot(
                new SlotType()
                {
                    Name = pair.Key,
                    ValueList = new()
                    {
                        Value = [pair.Value]
                    }
                });
        }

        requestMessage = sxmls.SerializeSoapMessageToXmlString(soapEnvelope).Content;

        await _editor.SetValue(requestMessage);
        
        messages.Add(new ToastMessage
        {
            Type = ToastType.Success,
            AutoHide = true,
            Title = "Request Generated",
            Content = @<div>SOAP request has been generated successfully.</div>
        });
    }

    private async Task OpenNewPageRetrieveDocumentSetSoapRequest(SimplifiedDocumentReference documentReference)
    {
        var url = $"ViewDocument?HomeCommunityId={Uri.EscapeDataString(documentReference.HomeCommunityId)}&RepositoryUniqueId={Uri.EscapeDataString(documentReference.RepositoryId)}&DocumentUniqueId={Uri.EscapeDataString(documentReference.DocumentId)}";
        await JS.InvokeVoidAsync("openPageWithParams", url);
    }

    private async Task SendRegistryStoredQuerySoapRequest()
    {
        sendRequestButton.ShowLoading("Sending request...");
        ResponseEnvelope = null;
        messages.Clear();
        requestMessage = await _editor.GetValue();

        if (string.IsNullOrEmpty(requestMessage))
        {
            sendRequestButton.HideLoading();
            messages.Add(
            new ToastMessage
            {
                Type = ToastType.Warning,
                AutoHide = true,
                Title = "Empty Request",
                Content = @<div>Please generate a SOAP request before sending.</div>
            });
            return;
        }

        try
        {
            var soapRequest = await sxmls.DeserializeSoapMessageAsync<SoapEnvelope>(requestMessage);
            if (soapRequest.Body.AdhocQueryRequest is not null && adhocQueryInput.Value is not null)
            {
                soapRequest.Body.AdhocQueryRequest.AdhocQuery.Id = adhocQueryInput.Value;
            }
        }
        catch (Exception ex)
        {
            sendRequestButton.HideLoading();
            modalException = ex;
            messages.Add(
            new ToastMessage
            {
                Type = ToastType.Danger,
                Title = "Request Error",
                AutoHide = true,
                Content = @<div>Failed to parse SOAP request: @ex.Message <button class="btn btn-sm btn-outline-danger mt-2" @onclick=@stackTraceModal.ShowAsync>View Details</button></div>,
            });
            return;
        }

        if (string.IsNullOrEmpty(backendUrl))
        {
            backendUrl = inputBackendUrl.Placeholder;
        }

        try
        {
            var content = new StringContent(requestMessage, System.Text.Encoding.UTF8, "application/soap+xml");
            soapRequestResponse = await Http.PostAsync($"{backendUrl}", content);

            if (soapRequestResponse.IsSuccessStatusCode)
            {
                var responseStream = await soapRequestResponse.Content.ReadAsStreamAsync();
                ResponseEnvelope = await sxmls.DeserializeSoapMessageAsync<SoapEnvelope>(responseStream);
                
                messages.Add(new ToastMessage
                {
                    Type = ToastType.Success,
                    AutoHide = true,
                    Title = "Query Successful",
                    Content = @<div>Document registry query completed successfully.</div>
                });
            }
            else
            {
                var responseStream = await soapRequestResponse.Content.ReadAsStreamAsync();
                ResponseEnvelope = await sxmls.DeserializeSoapMessageAsync<SoapEnvelope>(responseStream);
                
                messages.Add(new ToastMessage
                {
                    Type = ToastType.Warning,
                    AutoHide = true,
                    Title = "Query Returned Non-Success Status",
                    Content = @<div>Status: @soapRequestResponse.StatusCode</div>
                });
            }
        }
        catch (Exception ex)
        {
            sendRequestButton.HideLoading();
            modalException = ex;
            messages.Add(
                new ToastMessage
                {
                    Type = ToastType.Danger,
                    Title = "Communication Error",
                    AutoHide = true,
                    Content = @<div>Failed to send request to registry: @ex.Message <button class="btn btn-sm btn-outline-danger mt-2" @onclick=@stackTraceModal.ShowAsync>View Details</button></div>,
                });
            return;
        }
        sendRequestButton.HideLoading();
    }

    private void OnKeyValuePairsChanged(List<KeyValueEntry> updatedKeyValuePairs)
    {
        keyValuePairs = updatedKeyValuePairs;
    }

    private async Task<AutoCompleteDataProviderResult<KeyValueEntry>> ProvideSlotQueryParametersDataProvider(AutoCompleteDataProviderRequest<KeyValueEntry> request)
    {
        if (slotQueryParameters is null)
            slotQueryParameters = GetSlotQueryParameters(); // Fetch once

        var filteredParameters = slotQueryParameters
            .Where(c => c.Value.Contains(request.Filter.Value ?? "", StringComparison.OrdinalIgnoreCase));

        return await Task.FromResult(new AutoCompleteDataProviderResult<KeyValueEntry>
        {
            Data = filteredParameters
        });
    }

    private List<KeyValueEntry> GetSlotQueryParameters()
    {
        var storedQueryTypes = typeof(Constants.Xds.QueryParamters.FindDocuments).GetAsKeyValuePair();

        // Combine parameter types from different query types
        storedQueryTypes = [.. storedQueryTypes, .. typeof(Constants.Xds.QueryParamters.FindSubmissionSets).GetAsKeyValuePair()];
        storedQueryTypes = [.. storedQueryTypes, .. typeof(Constants.Xds.QueryParamters.Folder).GetAsKeyValuePair()];
        storedQueryTypes = [.. storedQueryTypes, .. typeof(Constants.Xds.QueryParamters.GetFolders).GetAsKeyValuePair()];
        storedQueryTypes = [.. storedQueryTypes, .. typeof(Constants.Xds.QueryParamters.GetFolderAndContents).GetAsKeyValuePair()];
        storedQueryTypes = [.. storedQueryTypes, .. typeof(Constants.Xds.QueryParamters.Associations).GetAsKeyValuePair()];
        storedQueryTypes = [.. storedQueryTypes, .. typeof(Constants.Xds.QueryParamters.General).GetAsKeyValuePair()];
        storedQueryTypes = [.. storedQueryTypes, .. typeof(Constants.Xds.QueryParamters.GetAll).GetAsKeyValuePair()];
        storedQueryTypes = [.. storedQueryTypes, .. typeof(Constants.Xds.QueryParamters.GetDocuments).GetAsKeyValuePair()];

        // Create distinct entry list
        var uniqueParameters = storedQueryTypes
            .Select(sqt => new KeyValueEntry() { Key = sqt.Key, Value = sqt.Value })
            .DistinctBy(entry => entry.Value)
            .ToList();

        return uniqueParameters;
    }

    private void EnterDefaultValuesBasedOnAdhocQuery(string adhocQuery)
    {
        if (currentAdhocQuery == adhocQuery)
        {
            // No change in value, just return
            return;
        }
        currentAdhocQuery = adhocQuery;

        keyValuePairs.RemoveAll(e => string.IsNullOrWhiteSpace(e.Key) && string.IsNullOrWhiteSpace(e.Value));

        switch (adhocQuery)
        {
            case Constants.Xds.StoredQueries.FindDocuments:
                var docEntryPatientId = "$XDSDocumentEntryPatientId";
                var docEntryStatus = "$XDSDocumentEntryStatus";

                keyValuePairs.AddIfNotInList(new KeyValueEntry() { Key = docEntryPatientId, Value = string.Empty });
                keyValuePairs.AddIfNotInList(new KeyValueEntry() { Key = docEntryStatus, Value = "urn:oasis:names:tc:ebxml-regrep:StatusType:Approved" });
                break;

            case Constants.Xds.StoredQueries.FindSubmissionSets:
                var subSetPatientId = "$XDSSubmissionSetPatientId";
                var subSetStatus = "$XDSSubmissionSetStatus";

                keyValuePairs.AddIfNotInList(new KeyValueEntry() { Key = subSetPatientId, Value = string.Empty });
                keyValuePairs.AddIfNotInList(new KeyValueEntry() { Key = subSetStatus, Value = "urn:oasis:names:tc:ebxml-regrep:StatusType:Approved" });
                break;

            case Constants.Xds.StoredQueries.FindFolders:
                var folderPatientId = "$XDSFolderPatientId";
                var folderStatus = "$XDSFolderStatus";

                keyValuePairs.AddIfNotInList(new KeyValueEntry() { Key = folderPatientId, Value = string.Empty });
                keyValuePairs.AddIfNotInList(new KeyValueEntry() { Key = folderStatus, Value = "urn:oasis:names:tc:ebxml-regrep:StatusType:Approved" });
                break;

            case Constants.Xds.StoredQueries.GetAssociations:
                var associationUuid = "$uuid";
                keyValuePairs.Add(new KeyValueEntry() { Key = associationUuid, Value = string.Empty });
                break;

            default:
                break;
        }
    }


    private static StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "xml",
            GlyphMargin = true,
            AutomaticLayout = true,
            Value = string.Empty,
            Theme = "vs",
            Minimap = new EditorMinimapOptions { Enabled = false },
            ScrollBeyondLastLine = false,
            RenderLineHighlight = "all",
            WordWrap = "on"
        };
    }

    private async Task EditorOnDidInit()
    {
        await _editor.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.KeyS, (args) =>
        {
            // Custom save command - could trigger SOAP request generation
            CreateSoapEnvelopeWithVariables();
        });

        var newDecorations = new ModelDeltaDecoration[]
        {
            new() {
                Range = new BlazorMonaco.Range(3,1,3,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
        };

        var decorationIds = await _editor.DeltaDecorations(null, newDecorations);
    }
}