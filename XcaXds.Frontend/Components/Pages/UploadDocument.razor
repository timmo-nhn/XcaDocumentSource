@page "/UploadDocument"
@rendermode InteractiveServer

@inject HttpClient httpClient 
@inject ICookie cookie

@using System.Diagnostics.CodeAnalysis
@using System.Text.Json
@using XcaXds.Commons.Models.Custom
@using XcaXds.Frontend.Components.UserInterface
@using XcaXds.Frontend.Components.EbRimComponents
@using XcaXds.Frontend.Components.EbRimComponents.SoapEnvelope
@using XcaXds.Commons.Models.Soap.XdsTypes
@using XcaXds.Commons.Models.Soap
@using XcaXds.Commons.Services
@using XcaXds.Commons
@using XcaXds.Commons.Models
@using BlazorBootstrap.Components
@using XcaXds.Frontend.Cookies

<PageTitle>Upload Document</PageTitle>
<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1><Icon Name="IconName.FileEarmarkText" /> Upload document and metadata</h1>
            <p class="text-muted">Upload documents and metadata to the Document Registry/Repository</p>
        </div>
    </div>

    <Toasts class="p-3" Messages="messages" />
    <ConfirmDialog @ref="confirmDialog" />
    <Modal @ref="stackTraceModal" title="Error Details" Size="ModalSize.Large">
        <BodyTemplate>
            <div class="alert alert-danger mb-3">
                <strong>@modalException.Source</strong>
                <p>@modalException.Message</p>
            </div>
            <div class="border p-3 bg-light">
                <code class="d-block" style="white-space: pre-wrap;">@modalException.StackTrace</code>
            </div>
        </BodyTemplate>
    </Modal>

    <div class="row mb-4">
        <div class="col">
            <Card>
                <CardHeader>
                    <Icon Name="IconName.Server" /> Endpoints
                </CardHeader>
                <CardBody>
                    <div class="input-group">
                        <span class="input-group-text"><Icon Name="IconName.Link45Deg" /></span>
                        <TextInput @ref="inputBackendUrl" @bind-Value="@backendUrl" 
                        Placeholder="https://localhost:7176/Repository/services/RepositoryService"
                        Class="form-control" />
                    </div>
                </CardBody>
            </Card>
        </div>
    </div>
    <div class="row mb-4">
        <div class="col">
            <Card>
                <CardHeader>
                    <Icon Name="IconName.Search" /> Query Parameters
                </CardHeader>
                <CardBody>
                    <ResizeablePane InitWidth="30%" MinWidth="200px">
                        <LeftContent>
                            <Card Style="height: 100% !important; background-color: white;" Class="h-100">
                                <CardHeader>
                                    <Icon Name="IconName.Sliders" /> Query Options
                                </CardHeader>
                                <CardBody Class="p-3">
                                    <div class="mb-3">
                                        <label class="form-label">Creation Time</label>
                                        <DateInput TValue="DateTime" @bind-Value="provideAndRegister.CreationTime" AutoComplete="true" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Service Start Time</label>
                                        <DateInput TValue="DateTime" @bind-Value="provideAndRegister.ServiceStartTime" AutoComplete="true" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Service Stop Time</label>
                                        <DateInput TValue="DateTime" @bind-Value="provideAndRegister.ServiceStopTime" AutoComplete="true" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">source Patient Id</label>
                                        <TextInput @bind-Value="provideAndRegister.SourcePatientId"/>
                                    </div>
                                    <hr />
                                    <Button @onclick="CreateSoapEnvelopeWithVariables"
                                    Style="width: 100%" 
                                    Color="ButtonColor.Success">
                                        <Icon Name="IconName.CodeSquare" /> Generate Request
                                    </Button>
                                </CardBody>
                            </Card>
                        </LeftContent>
                        <RightContent>
                            <Card Style="height: 100%; background-color: white;">
                                <CardHeader>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span><Icon Name="IconName.EnvelopeAt" /> SOAP Request</span>
                                    </div>
                                </CardHeader>
                                <CardBody Class="p-0 h-100">
                                    <MonacoEditor @ref="_monacoEditorRef" EditorLanguage="xml" OnSave=@CreateSoapEnvelopeWithVariables />
                                </CardBody>
                            </Card>
                        </RightContent>
                    </ResizeablePane>
                </CardBody>
            </Card>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <Button @ref="sendRequestButton" 
            Class="btn btn-primary btn-lg" 
            @onclick="SendProvideAndRegisterDocumentSetRequest">
                <Icon Name="IconName.Send" /> Send Query
            </Button>
        </div>
    </div>

    @if (ResponseEnvelope is not null)
    {
        <SoapEnvelopeComponent SoapEnvelope="ResponseEnvelope" />
    }
</div>

<!-- This is for overriding the default width of the KeyValuePairComponent's AutoComplete component -->
<style>
    .dropdown-menu.autocomplete-list {
        min-width: fit-content;
    }
    .autocomplete{
        min-width:200px;
        width:75%;
    }
</style>


<style>
    .keyvalue-container {
        container-type: inline-size;
    }

    .keyvaluepair {
        display: flex;
        align-items: baseline;
        padding: 1px;
        margin: 1px;
        flex-wrap: nowrap;
    }

    @@container (max-width: 600px) {
        .keyvaluepair {
            flex-direction: column;
            align-items: stretch;
        }
        .autocomplete {
            width: unset;
        }
    }
</style>


@code {
    // User input/output
    private string backendUrl;
    private TextInput inputBackendUrl = new();
    private string requestMessage;
    private SoapEnvelope ResponseEnvelope;
    private SoapXmlSerializer sxmls = new(XmlSettings.Soap);

    private MonacoEditor _monacoEditorRef = default!;

    // Inputs
    private SimplifiedProvideAndRegister provideAndRegister;

    // BootstrapBlazor UI components
    private Button sendRequestButton = default!;
    private List<ToastMessage> messages = new();
    private Modal stackTraceModal = default!;
    private Exception modalException = new();
    private ConfirmDialog confirmDialog = new();


    private async Task CreateSoapEnvelopeWithVariables()
    {
        var currentContent = "";
        if (!string.IsNullOrEmpty(currentContent) && currentContent != requestMessage)
        {
            var confirmation = await confirmDialog.ShowAsync(
                title: "Existing Content Will Be Replaced",
                message1: "This will overwrite the current editor content. This action cannot be undone.",
                message2: "Do you want to proceed?");

            if (!confirmation)
            {
                return;
            }
        }

        var soapEnvelope = new SoapEnvelope()
        {
            Header = new()
            {
                Action = Constants.Xds.OperationContract.Iti18Action,
                MessageId = Guid.NewGuid().ToString(),
                To = backendUrl ?? inputBackendUrl.Placeholder
            },
            Body = new()
        };


        requestMessage = sxmls.SerializeSoapMessageToXmlString(soapEnvelope).Content;
        // await _editor.SetValue(requestMessage);

        messages.Add(new ToastMessage
        {
            Type = ToastType.Success,
            AutoHide = true,
            Title = "Request Generated",
            Content = @<div>SOAP request has been generated successfully.</div>
        });
    }

    private async Task SendProvideAndRegisterDocumentSetRequest()
    {

    }


    protected override void OnInitialized()
    {
        provideAndRegister ??= new();
        provideAndRegister.CreationTime = DateTime.Now;
    }

}
