@page "/PatientId"
@rendermode InteractiveServer

@inject HttpClient httpClient 
@inject ICookie cookie

@using System.Diagnostics.CodeAnalysis
@using System.Text.Json
@using BlazorMonaco
@using BlazorMonaco.Editor
@using XcaXds.Commons.Models.Custom
@using XcaXds.Frontend.Components.UserInterface
@using XcaXds.Frontend.Components.EbRimComponents
@using XcaXds.Frontend.Components.EbRimComponents.SoapEnvelope
@using XcaXds.Commons.Models.Soap.XdsTypes
@using XcaXds.Commons.Models.Soap
@using XcaXds.Commons.Services
@using XcaXds.Commons
@using XcaXds.Commons.Models
@using BlazorBootstrap.Components
@using XcaXds.Frontend.Cookies

@using Efferent.HL7.V2
@using XcaXds.Commons.Models.Hl7.DataType

<PageTitle>Patient Identifiers</PageTitle>
<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1><Icon Name="IconName.FileEarmarkText" /> Search Patient Identifiers</h1>
            <p class="text-muted">Search and Cross-reference patient identifiers - useful for autocompleting identifiers during search and upload of documents and document metadata</p>
        </div>
    </div>

    <Toasts class="p-3" Messages="messages" />
    <ConfirmDialog @ref="confirmDialog" />
    <Modal @ref="stackTraceModal" title="Error Details" Size="ModalSize.Large">
        <BodyTemplate>
            <div class="alert alert-danger mb-3">
                <strong>@modalException.Source</strong>
                <p>@modalException.Message</p>
            </div>
            <div class="border p-3 bg-light">
                <code class="d-block" style="white-space: pre-wrap;">@modalException.StackTrace</code>
            </div>
        </BodyTemplate>
    </Modal>

    <div class="row mb-4">
        <div class="col">
            <Card>
                <CardHeader>
                    <Icon Name="IconName.Server" /> Endpoints
                </CardHeader>
                <CardBody>
                    <div class="input-group">
                        <span class="input-group-text"><Icon Name="IconName.Link45Deg" /></span>
                        <TextInput @ref="inputBackendUrl" @bind-Value="@backendUrl" 
                        Placeholder="https://localhost:7176/hl7/search-patients"
                        Class="form-control" />
                    </div>
                </CardBody>
            </Card>
        </div>
    </div>
    <div class="row mb-4">
        <div class="col">
            <Card>
                <CardHeader>
                    <Icon Name="IconName.Search" /> Query Parameters
                </CardHeader>
                <CardBody>
                    <ResizeablePane InitWidth="30%" MinWidth="200px">
                        <LeftContent>
                            <Card Style="height: 100% !important; background-color: white;" Class="h-50">
                                <CardHeader>
                                    <Icon Name="IconName.Sliders" /> Query Options
                                </CardHeader>
                                <CardBody Class="p-3">
                                    <div class="col">
                                        <CardText> Patient Identifier</CardText>
                                        <TextInput @bind-Value="patientIdentifier" />
                                    </div>
                                    <div class="col">
                                        <CardText> Patient Name</CardText>
                                        <TextInput @bind-Value="patientIdentifierName" />
                                        <hr />
                                        <div class="alert alert-info">
                                            <Icon Name="IconName.InfoCircle" /> Name Format<br /> <pre style="overflow:hidden;">LastName^FirstName^FurtherNames^Suffix</pre>
                                        </div>
                                    </div>
                                    <hr />
                                    <Button @onclick="CreatePatientDemographicsQueryRequest"
                                    Style="width: 100%"
                                    Color="ButtonColor.Success">
                                        <Icon Name="IconName.CodeSquare" /> Generate Request
                                    </Button>
                                </CardBody>
                            </Card>
                        </LeftContent>
                        <RightContent>
                            <Card Style="height: 100%; background-color: white;">
                                <CardHeader>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span><Icon Name="IconName.EnvelopeAt" /> HL7 Request</span>
                                    </div>
                                </CardHeader>
                                <CardBody Class="p-0 h-50">
                                    <StandaloneCodeEditor @ref="_editor"
                                    Id="xds-query-editor"
                                    CssClass=""
                                    ConstructionOptions="EditorConstructionOptions"
                                    OnDidInit="EditorOnDidInit" />
                                </CardBody>
                            </Card>
                        </RightContent>
                    </ResizeablePane>
                </CardBody>
            </Card>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <Button @ref="sendRequestButton" 
            Class="btn btn-primary btn-lg" 
            @onclick="SendPatientDemographicsQueryRequest">
                <Icon Name="IconName.Send" /> Send Query
            </Button>
        </div>
    </div>
</div>

@code {
    // User input/output
    private string backendUrl;
    private TextInput inputBackendUrl = new();
    private string requestMessage;

    private SoapEnvelope ResponseEnvelope;
    private SoapXmlSerializer sxmls = new(XmlSettings.Soap);

    // Inputs
    private string patientIdentifier;
    private string patientIdentifierName;

    // BootstrapBlazor UI components
    private Button sendRequestButton = default!;
    private List<ToastMessage> messages = new();
    private Modal stackTraceModal = default!;
    private Exception modalException = new();
    private ConfirmDialog confirmDialog = new();


    // Monaco Editor configuration
    [AllowNull] 
    private StandaloneCodeEditor _editor;


    private async Task CreatePatientDemographicsQueryRequest()
    {
        var currentContent = await _editor.GetValue();
        if (!string.IsNullOrEmpty(currentContent) && currentContent != requestMessage)
        {
            var confirmation = await confirmDialog.ShowAsync(
                title: "Existing Content Will Be Replaced",
                message1: "This will overwrite the current editor content. This action cannot be undone.",
                message2: "Do you want to proceed?"
            );

            if (!confirmation)
            {
                return;
            }
        }

        var message = new Message();

        message.AddSegmentMSH("MyApp", "SendingFac", "YourApp", "ReceivingFac", "", "QBP^Q22^QBP_Q21","1337","T","2.5");

        var enc = new HL7Encoding();

        var segment = new Segment("QPD", enc);

        segment.AddNewField(new Field(enc) { Value = "IHE PDQ Query" },1);
        segment.AddNewField(new Field(enc) { Value = "Q1234" },2);

        var patientIdRepeatingField = new Field(enc);
        patientIdRepeatingField.HasRepetitions = true;

        if (!string.IsNullOrWhiteSpace(patientIdentifier))
            patientIdRepeatingField.AddRepeatingField(new Field(enc) { Value = $"@PID.3.1^{patientIdentifier}" });

        if (!string.IsNullOrWhiteSpace(patientIdentifierName))
        {

            var patientXpn = new XPN();

            if (patientIdentifierName.Contains("^"))
            {
                patientXpn = Hl7Object.Parse<XPN>(patientIdentifierName);
            }
            else
            {
                var patientNameParts = patientIdentifierName.Split(" ");
                patientXpn.FamilyName = string.Join(" ", patientNameParts.TakeLast(patientNameParts.Length - 1));
                patientXpn.GivenName = patientNameParts.FirstOrDefault();
            }

            patientIdRepeatingField.AddRepeatingField(new Field(enc) { Value = $"@PID.5^{patientXpn.Serialize()}" });
        }

        segment.AddNewField(patientIdRepeatingField);
        message.AddNewSegment(segment);

        var gg = message.SerializeMessage();



        await _editor.SetValue(gg);

    }

    private async Task SendPatientDemographicsQueryRequest()
    {
        sendRequestButton.ShowLoading("Sending request...");
        messages.Clear();
        requestMessage = await _editor.GetValue();

        if (string.IsNullOrEmpty(requestMessage))
        {
            sendRequestButton.HideLoading();
            messages.Add(
        new ToastMessage
                {
                    Type = ToastType.Warning,
                    AutoHide = true,
                    Title = "Empty Request",
                    Content = @<div>Please generate a HL7 request before sending.</div>
                });
            return;
        }


        if (string.IsNullOrEmpty(backendUrl))
        {
            backendUrl = inputBackendUrl.Placeholder;
        }

        try
        {
            var content = new StringContent(requestMessage, System.Text.Encoding.UTF8, "application/hl7-v2");
            var hl7RequestResponse = await httpClient.PostAsync($"{backendUrl}", content);

            if (hl7RequestResponse.IsSuccessStatusCode)
            {
                var responseStream = await hl7RequestResponse.Content.ReadAsStreamAsync();

                messages.Add(new ToastMessage
                        {
                            Type = ToastType.Success,
                            AutoHide = true,
                            Title = "Query Successful",
                            Content = @<div>Document registry query completed successfully.</div>
                    });
            }
        }
        catch (Exception ex)
        {
            sendRequestButton.HideLoading();
            modalException = ex;
            messages.Add(
            new ToastMessage
                    {
                        Type = ToastType.Danger,
                        Title = "Communication Error",
                        AutoHide = true,
                        Content = @<div>Failed to send request to registry: @ex.Message <button class="btn btn-sm btn-outline-danger mt-2" @onclick=@stackTraceModal.ShowAsync>View Details</button></div>,
                });
            return;
        }
        sendRequestButton.HideLoading();
    }


    private static StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "xml",
            GlyphMargin = true,
            AutomaticLayout = true,
            Value = string.Empty,
            Theme = "vs",
            Minimap = new EditorMinimapOptions { Enabled = false },
            ScrollBeyondLastLine = false,
            RenderLineHighlight = "all",
            WordWrap = "on"
        };
    }


    private async Task EditorOnDidInit()
    {
        await _editor.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.KeyS, (args) =>
        {
            // Custom save command - could trigger HL7 request generation
            CreatePatientDemographicsQueryRequest();
        });

        var newDecorations = new ModelDeltaDecoration[]
        {
            new() {
                Range = new BlazorMonaco.Range(3,1,3,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
        };

        var decorationIds = await _editor.DeltaDecorations(null, newDecorations);
    }

    protected override void OnInitialized()
    {
    }

}
