@page "/Document"
@rendermode InteractiveServer

@inject HttpClient httpClient   

@inject ICookie cookie

@using System.Diagnostics.CodeAnalysis
@using System.Text.Json
@using BlazorMonaco
@using BlazorMonaco.Editor
@using XcaXds.Commons.Models.Custom
@using XcaXds.Frontend.Components.UserInterface;
@using XcaXds.Frontend.Components.EbRimComponents;
@using XcaXds.Frontend.Components.EbRimComponents.SoapEnvelope;
@using XcaXds.Commons.Models.Soap.XdsTypes;
@using XcaXds.Commons.Models.Soap;
@using XcaXds.Commons.Services;
@using XcaXds.Commons;
@using XcaXds.Commons.Models;
@using BlazorBootstrap.Components;
@using XcaXds.Frontend.Cookies

<PageTitle>Document</PageTitle>

<h1>Get Document</h1>

<Toasts class="p-3" Messages="messages" />
<ConfirmDialog @ref="confirmDialog" />
<Modal @ref="stackTraceModal" title="@modalException.Source" Size="ModalSize.Large">
    <BodyTemplate><code>@modalException.StackTrace</code></BodyTemplate>
</Modal>


<Card>
    <CardHeader>Connected Backend</CardHeader>
    <CardBody>
        <TextInput @ref="inputBackendUrl" @bind-Value="@backendUrl" Placeholder="https://localhost:7176/Repository/services/RepositoryService" />
    </CardBody>
</Card>
<hr />
<Card>
    <CardHeader>Search</CardHeader>
    <CardBody>
        <ResizeablePane InitWidth="30%">
            <LeftContent>
                <Card Style="flex: 1;min-width: 100%">
                    <CardHeader Style="white-space: nowrap;">Parameters</CardHeader>
                    <CardBody Style="padding:10px;">
                        <DocumentRequestValueInputComponent ListValueInputs="@valuesInput" XdsConfig="xdsConfig" OnValueListChanged="@OnValueListsChanged" />
                        <hr />
                        <Button @onclick=CreateSoapEnvelopeWithVariables Style="min-width: 100%" Color="ButtonColor.Success">To Request <Icon Name="IconName.EnvelopeArrowUp" /></Button>
                    </CardBody>
                </Card>
            </LeftContent>
            <RightContent>
                <Card Style="flex: 2;">
                    <CardHeader Style="white-space: nowrap;">Request</CardHeader>
                    <CardBody Style="padding:0px;padding-top:5px;">
                        <StandaloneCodeEditor @ref="_editor" Id="sample-code-editor" CssClass="monaco-editor-class" ConstructionOptions="EditorConstructionOptions"
                        OnDidInit="EditorOnDidInit" />
                    </CardBody>
                </Card>
            </RightContent>
        </ResizeablePane>
    </CardBody>
</Card>


<Button @ref="sendRequestButton" class="btn btn-primary" @onclick="SendSoapRequest"><Icon Name="IconName.Envelope" /> Send SOAP-Request</Button>

@if (ResponseEnvelope != null)
{
    <SoapEnvelopeComponent soapEnvelope=ResponseEnvelope />
}


@code {
    // User input/output
    private string backendUrl;
    private string requestMessage;
    private SoapEnvelope ResponseEnvelope;
    private SoapXmlSerializer sxmls = new(XmlSettings.Soap);

    private XdsConfig xdsConfig;


    private bool _initialized = false; // JS Interop 


    private List<DocumentRequestValuesInput> valuesInput { get; set; }

    // BootstrapBlazor UI components
    private Button sendRequestButton = default!;
    private List<ToastMessage> messages = new();
    private Modal stackTraceModal = default!;
    private Exception modalException = new();
    private ConfirmDialog confirmDialog = new();
    private TextInput inputBackendUrl = new();

    // ==============================================================
    // ================== SOAP-envelope creation ====================
    // ==============================================================

    private async Task CreateSoapEnvelopeWithVariables()
    {
        var currentContent = await _editor.GetValue();
        if (!string.IsNullOrEmpty(currentContent) && currentContent != requestMessage)
        {
            var confirmation = await confirmDialog.ShowAsync(
            title: "Editor value differs from Parameters",
            message1: "This will overwrite the current editor content. This cannot be undone!",
            message2: "Do you want to proceed?");

            if (!confirmation)
            {
                return;
            }
        }

        var soapEnvelope = new SoapEnvelope()
        {
            Header = new()
            {
                Action = Constants.Xds.OperationContract.Iti43Action,
                MessageId = Guid.NewGuid().ToString(),
                To = backendUrl ?? inputBackendUrl.Placeholder
            },
            Body = new()
            {
                RetrieveDocumentSetRequest = new()
                {
                    DocumentRequest = []
                }
            }
        };

        if (valuesInput == null) return;

        foreach (var pair in valuesInput)
        {
            if (pair.DocumentRequest == null || string.IsNullOrEmpty(pair.DocumentRequest.DocumentUniqueId))
            {
                continue;
            }

            if (string.IsNullOrEmpty(pair.DocumentRequest.DocumentUniqueId))
            {
                sendRequestButton.HideLoading();
                messages.Add(
                    new ToastMessage()
                    {
                        Type = ToastType.Warning,
                        AutoHide = true,
                        Title = "No Unique ID for document request"
                    });
            }

            soapEnvelope.Body.RetrieveDocumentSetRequest.AddDocumentRequest(
                new DocumentRequestType()
                {
                    DocumentUniqueId = pair.DocumentRequest.DocumentUniqueId,
                    HomeCommunityId = pair.DocumentRequest.HomeCommunityId,
                    RepositoryUniqueId = pair.DocumentRequest.RepositoryUniqueId
                });
        }

        requestMessage = sxmls.SerializeSoapMessageToXmlString(soapEnvelope).Content;

        await _editor.SetValue(requestMessage);
    }

    private async Task SendSoapRequest()
    {
        sendRequestButton.ShowLoading("🔥 Sending Request...");

        requestMessage = await _editor.GetValue();

        if (string.IsNullOrEmpty(requestMessage))
        {
            sendRequestButton.HideLoading();
            messages.Add(
            new ToastMessage()
            {
                Type = ToastType.Dark,
                AutoHide = true,
                Title = "No Envelope Content"
            });
            return;
        }

        try
        {
            var soapRequest = await sxmls.DeserializeSoapMessageAsync<SoapEnvelope>(requestMessage);
        }
        catch (Exception ex)
        {
            sendRequestButton.HideLoading();
            modalException = ex;
            messages.Add(
            new ToastMessage
            {
                Type = ToastType.Danger,
                Title = modalException.Message,
                AutoHide = true,
                Content = @<div>@modalException.Source <button class="btn btn-sm link-primary mt-2" @onclick=@stackTraceModal.ShowAsync>Show stack trace</button></div>,
            });
            return;
        }

        if (string.IsNullOrEmpty(backendUrl))
        {
            backendUrl = inputBackendUrl.Placeholder;
        }

        var content = new StringContent(requestMessage, System.Text.Encoding.UTF8, "application/soap+xml");
        var response = await httpClient.PostAsync($"{backendUrl}", content);

        if (response.IsSuccessStatusCode)
        {
            var responseStream = await response.Content.ReadAsStreamAsync();
            ResponseEnvelope = await sxmls.DeserializeSoapMessageAsync<SoapEnvelope>(responseStream);

            // RegistryObjectList = responseMessage.Body.AdhocQueryResponse.RegistryObjectList.ToList();
        }
        else
        {
            var responseStream = await response.Content.ReadAsStreamAsync();
            ResponseEnvelope = await sxmls.DeserializeSoapMessageAsync<SoapEnvelope>(responseStream);
        }
        sendRequestButton.HideLoading();
    }

    // =============================================
    // ========== Key Value Pair handling ==========
    // =============================================

    private void OnValueListsChanged(List<DocumentRequestValuesInput> updatedKeyValuePairs)
    {
        valuesInput = updatedKeyValuePairs;
    }

    // =======================================================
    // ============= XdsConfig Cookie setting ================
    // =======================================================

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true;

            string xdsConfigJson = await cookie.GetValue("xdsConfig");

            if (string.IsNullOrWhiteSpace(xdsConfigJson))
            {
                var response = await httpClient.SendAsync(new HttpRequestMessage(HttpMethod.Get, "https://localhost:7176/api/about"));
                if (response.IsSuccessStatusCode)
                {
                    xdsConfigJson = await response.Content.ReadAsStringAsync();
                }
            }

            await cookie.SetValue("xdsConfig", xdsConfigJson,1);

            xdsConfig = JsonSerializer.Deserialize<XdsConfig>(xdsConfigJson, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

            StateHasChanged();
        }
    }
    
    // =======================================================
    // ================= Blazor Moncao Editor ================
    // =======================================================
    [AllowNull]
    private StandaloneCodeEditor _editor;

    private static StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "xml",
                GlyphMargin = true,
                AutomaticLayout = true,
                Value = string.Empty
            };
    }

    private async Task EditorOnDidInit()
    {
        await _editor.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) =>
    {
        Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
    });

        var newDecorations = new ModelDeltaDecoration[]
    {
            new() {
                Range = new BlazorMonaco.Range(3,1,3,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
    };

        var decorationIds = await _editor.DeltaDecorations(null, newDecorations);
        // You can now use '_decorationIds' to change or remove the decorations
    }

}