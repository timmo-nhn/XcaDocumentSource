@page "/Document"
@rendermode InteractiveServer

@inject HttpClient httpClient   
@inject ICookie cookie

@using System.Diagnostics.CodeAnalysis
@using System.Text.Json
@using XcaXds.Commons.Models.Custom
@using XcaXds.Frontend.Components.UserInterface
@using XcaXds.Frontend.Components.EbRimComponents
@using XcaXds.Frontend.Components.EbRimComponents.SoapEnvelope
@using XcaXds.Commons.Models.Soap.XdsTypes
@using XcaXds.Commons.Models.Soap
@using XcaXds.Commons.Services
@using XcaXds.Commons
@using XcaXds.Commons.Models
@using BlazorBootstrap.Components
@using XcaXds.Frontend.Cookies

<PageTitle>Document Retrieval</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1><Icon Name="IconName.FileEarmarkArrowDown" /> Document Retrieval</h1>
            <p class="text-muted">Retrieve documents from the XDS Document Repository</p>
        </div>
    </div>

    <Toasts class="p-3" Messages="messages" />
    <ConfirmDialog @ref="confirmDialog" />
    <Modal @ref="stackTraceModal" title="Error Details" Size="ModalSize.Large">
        <BodyTemplate>
            <div class="alert alert-danger mb-3">
                <strong>@modalException.Source</strong>
                <p>@modalException.Message</p>
            </div>
            <div class="border p-3 bg-light">
                <code class="d-block" style="white-space: pre-wrap;">@modalException.StackTrace</code>
            </div>
        </BodyTemplate>
    </Modal>

    <div class="row mb-4">
        <div class="col">
            <Card>
                <CardHeader>
                    <Icon Name="IconName.Server" /> Repository Endpoint
                </CardHeader>
                <CardBody>
                    <div class="input-group">
                        <span class="input-group-text"><Icon Name="IconName.Link45Deg" /></span>
                        <TextInput @ref="inputBackendUrl" @bind-Value="@backendUrl" 
                            Placeholder="https://localhost:7176/Repository/services/RepositoryService"
                            Class="form-control" />
                    </div>
                </CardBody>
            </Card>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <Card>
                <CardHeader>
                    <Icon Name="IconName.CardList" /> Document Request
                </CardHeader>
                <CardBody>
                    <ResizeablePane InitWidth="30%" MinWidth="200px">
                        <LeftContent>
                            <Card Style="height: 100%;">
                                <CardHeader>
                                    <Icon Name="IconName.FileEarmarkText" /> Document Parameters
                                </CardHeader>
                                <CardBody Class="p-3">
                                    @if (xdsConfig != null)
                                    {
                                        <div class="alert alert-info mb-3">
                                            <small>
                                                <strong>Repository Config:</strong><br />
                                                HomeCommunityId: @(xdsConfig.HomeCommunityId ?? "Not Set")<br />
                                                RepositoryUniqueId: @(xdsConfig.RepositoryUniqueId ?? "Not Set")
                                            </small>
                                        </div>
                                    }
                                    
                                    <DocumentRequestValueInputComponent 
                                        ListValueInputs="@valuesInput" 
                                        XdsConfig="xdsConfig" 
                                        OnValueListChanged="@OnValueListsChanged" />
                                    
                                    <hr />
                                    <Button @onclick="CreateSoapEnvelopeWithVariables" 
                                           Style="width: 100%" 
                                           Color="ButtonColor.Success">
                                        <Icon Name="IconName.CodeSquare" /> Generate Request
                                    </Button>
                                </CardBody>
                            </Card>
                        </LeftContent>
                        <RightContent>
                            <Card Style="height: 100%;">
                                <CardHeader>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span><Icon Name="IconName.EnvelopeAt" /> SOAP Request</span>
                                    </div>
                                </CardHeader>
                                <CardBody Class="p-0 h-100">
                                    <MonacoEditor @ref="_monacoEditorRef" EditorId="GetDocument" EditorLanguage="xml" OnSave=@CreateSoapEnvelopeWithVariables />
                                </CardBody>
                            </Card>
                        </RightContent>
                    </ResizeablePane>
                </CardBody>
            </Card>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <Button @ref="sendRequestButton" 
                   Class="btn btn-primary btn-lg" 
                   @onclick="SendSoapRequest">
                <Icon Name="IconName.Send" /> Retrieve Document
            </Button>
        </div>
    </div>

    @if (ResponseEnvelope != null)
    {
        <div class="row">
            <div class="col">
                <Card>
                    <CardHeader>
                        <Icon Name="IconName.FileEarmarkText" /> Document Response
                    </CardHeader>
                    <CardBody>
                        <SoapEnvelopeComponent soapEnvelope="ResponseEnvelope" />
                    </CardBody>
                </Card>
            </div>
        </div>
    }
</div>

@code {
    // User input/output
    private string backendUrl;
    private string requestMessage;
    private SoapEnvelope ResponseEnvelope;
    private SoapXmlSerializer sxmls = new(XmlSettings.Soap);
    private ApplicationConfig xdsConfig;
    private bool _initialized = false; // JS Interop flag
    private List<DocumentRequestValuesInput> valuesInput { get; set; }

    private MonacoEditor _monacoEditorRef = default!;

    // BootstrapBlazor UI components
    private Button sendRequestButton = default!;
    private List<ToastMessage> messages = new();
    private Modal stackTraceModal = default!;
    private Exception modalException = new();
    private ConfirmDialog confirmDialog = new();
    private TextInput inputBackendUrl = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true;

            try
            {
                // Try to load XDS configuration from cookies
                string xdsConfigJson = await cookie.GetValue("xdsConfig");

                if (string.IsNullOrWhiteSpace(xdsConfigJson))
                {
                    // If not in cookies, try to get from API
                    var response = await httpClient.SendAsync(new HttpRequestMessage(HttpMethod.Get, "https://localhost:7176/api/about/config"));
                    if (response.IsSuccessStatusCode )
                    {
                        xdsConfigJson = await response.Content.ReadAsStringAsync();
                        
                        // Save to cookie for future use
                        await cookie.SetValue("xdsConfig", xdsConfigJson, 1);
                    }
                }

                if (!string.IsNullOrWhiteSpace(xdsConfigJson))
                {
                    xdsConfig = JsonSerializer.Deserialize<ApplicationConfig>(xdsConfigJson, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
                    
                    messages.Add(new ToastMessage
                    {
                        Type = ToastType.Info,
                        AutoHide = true,
                        Title = "Configuration Loaded",
                        Content = @<div>Repository configuration loaded successfully.</div>
                    });
                }
                else
                {
                    messages.Add(new ToastMessage
                    {
                        Type = ToastType.Warning,
                        AutoHide = true,
                        Title = "Configuration Missing",
                        Content = @<div>Could not load repository configuration.</div>
                    });
                }
            }
            catch (Exception ex)
            {
                messages.Add(new ToastMessage
                {
                    Type = ToastType.Warning,
                    AutoHide = true,
                    Title = "Configuration Error",
                    Content = @<div>Error loading configuration: @ex.Message</div>
                });
            }

            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        // Initialize document request inputs
        valuesInput = new List<DocumentRequestValuesInput> { new DocumentRequestValuesInput() };
    }

    private async Task CreateSoapEnvelopeWithVariables()
    {   

        string currentContent = await _monacoEditorRef.GetValueAsync();
        
        if (!string.IsNullOrWhiteSpace(currentContent) && currentContent != requestMessage)
        {
            var confirmation = await confirmDialog.ShowAsync(
                title: "Existing Content Will Be Replaced",
                message1: "This will overwrite the current editor content. This action cannot be undone.",
                message2: "Do you want to proceed?");

            if (!confirmation)
            {
                return;
            }
        }

        // Check if we have any valid document requests
        if (valuesInput == null || !valuesInput.Any(v => 
            v.DocumentRequest != null && 
            !string.IsNullOrWhiteSpace(v.DocumentRequest.DocumentUniqueId)))
        {
            messages.Add(new ToastMessage
            {
                Type = ToastType.Warning,
                AutoHide = true,
                Title = "Missing Document ID",
                Content = @<div>Please specify at least one Document Unique ID.</div>
            });
            return;
        }

        // Create the SOAP envelope
        var soapEnvelope = new SoapEnvelope()
        {
            Header = new()
            {
                Action = Constants.Xds.OperationContract.Iti43Action,
                MessageId = Guid.NewGuid().ToString(),
                To = backendUrl ?? inputBackendUrl.Placeholder
            },
            Body = new()
            {
                RetrieveDocumentSetRequest = new()
                {
                    DocumentRequest = []
                }
            }
        };

        // Add document requests to the envelope
        foreach (var entry in valuesInput)
        {
            if (entry.DocumentRequest == null || string.IsNullOrEmpty(entry.DocumentRequest.DocumentUniqueId))
            {
                continue;
            }

            // Add the document request
            soapEnvelope.Body.RetrieveDocumentSetRequest.AddDocumentRequest(
                new DocumentRequestType()
                {
                    DocumentUniqueId = entry.DocumentRequest.DocumentUniqueId,
                    HomeCommunityId = entry.DocumentRequest.HomeCommunityId,
                    RepositoryUniqueId = entry.DocumentRequest.RepositoryUniqueId
                });
        }

        // Serialize the envelope to XML
        requestMessage = sxmls.SerializeSoapMessageToXmlString(soapEnvelope).Content;

        await _monacoEditorRef.SetValueAsync(requestMessage);
         
        messages.Add(new ToastMessage
        {
            Type = ToastType.Success,
            AutoHide = true,
            Title = "Request Generated",
            Content = @<div>SOAP request has been generated successfully.</div>
        });
    }

    private async Task SendSoapRequest()
    {
        sendRequestButton.ShowLoading("Retrieving document...");

      
        string requestMessage = await _monacoEditorRef.GetValueAsync();

        if (string.IsNullOrEmpty(requestMessage))
        {
            sendRequestButton.HideLoading();
            messages.Add(new ToastMessage
            {
                Type = ToastType.Warning,
                AutoHide = true,
                Title = "Empty Request",
                Content = @<div>Please generate a SOAP request before sending.</div>
            });
            return;
        }

        try
        {
            // Validate SOAP request
            var soapRequest = await sxmls.DeserializeSoapMessageAsync<SoapEnvelope>(requestMessage);
        }
        catch (Exception ex)
        {
            sendRequestButton.HideLoading();
            modalException = ex;
            messages.Add(new ToastMessage
            {
                Type = ToastType.Danger,
                Title = "Request Error",
                AutoHide = true,
                Content = @<div>Failed to parse SOAP request: @ex.Message <button class="btn btn-sm btn-outline-danger mt-2" @onclick=@stackTraceModal.ShowAsync>View Details</button></div>
            });
            return;
        }

        if (string.IsNullOrEmpty(backendUrl))
        {
            backendUrl = inputBackendUrl.Placeholder;
        }

        try
        {
            // Send the SOAP request
            var content = new StringContent(requestMessage, System.Text.Encoding.UTF8, "application/soap+xml");
            var response = await httpClient.PostAsync(backendUrl, content);

            if (response.IsSuccessStatusCode)
            {
                var responseStream = await response.Content.ReadAsStreamAsync();
                ResponseEnvelope = await sxmls.DeserializeSoapMessageAsync<SoapEnvelope>(responseStream);
                
                if (ResponseEnvelope.Body.RetrieveDocumentSetResponse?.DocumentResponse?.Length > 0)
                {
                    messages.Add(new ToastMessage
                    {
                        Type = ToastType.Success,
                        AutoHide = true,
                        Title = "Document Retrieved",
                        Content = @<div>Successfully retrieved @ResponseEnvelope.Body.RetrieveDocumentSetResponse.DocumentResponse.Length document(s).</div>
                    });
                }
                else
                {
                    messages.Add(new ToastMessage
                    {
                        Type = ToastType.Warning,
                        AutoHide = true,
                        Title = "No Documents",
                        Content = @<div>Request successful, but no documents were returned.</div>
                    });
                }
            }
            else
            {
                var responseStream = await response.Content.ReadAsStreamAsync();
                ResponseEnvelope = await sxmls.DeserializeSoapMessageAsync<SoapEnvelope>(responseStream);
                
                messages.Add(new ToastMessage
                {
                    Type = ToastType.Warning,
                    AutoHide = true,
                    Title = "Retrieval Failed",
                    Content = @<div>Status: @response.StatusCode</div>
                });
            }
        }
        catch (Exception ex)
        {
            sendRequestButton.HideLoading();
            modalException = ex;
            messages.Add(new ToastMessage
            {
                Type = ToastType.Danger,
                Title = "Communication Error",
                AutoHide = true,
                Content = @<div>Failed to send request to repository: @ex.Message <button class="btn btn-sm btn-outline-danger mt-2" @onclick=@stackTraceModal.ShowAsync>View Details</button></div>
            });
            return;
        }
        
        sendRequestButton.HideLoading();
    }

    private void OnValueListsChanged(List<DocumentRequestValuesInput> updatedValuesList)
    {
        valuesInput = updatedValuesList;
    }
}