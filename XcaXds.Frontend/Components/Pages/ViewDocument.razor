@page "/ViewDocument"

@using XcaXds.Commons
@using XcaXds.Commons.Models.Soap
@using XcaXds.Commons.Services
@using XcaXds.Frontend.Components.EbRimComponents.SoapEnvelope

@inject NavigationManager Nav
@inject HttpClient httpClient

<Card>
    <CardHeader>Connected Backend</CardHeader>
    <CardBody>
        <TextInput @ref="inputBackendUrl" @bind-Value="@backendUrl" Placeholder="https://localhost:7176/Repository/services/RepositoryService" />
    </CardBody>
</Card>øl

@if (ResponseEnvelope is not null)
{
    <SoapEnvelopeComponent SoapEnvelope="ResponseEnvelope" />
}

@code {

    [Inject] protected PreloadService PreloadService { get; set; } = default!;


    private string backendUrl = string.Empty;
    private TextInput inputBackendUrl = default!;
    private string requestMessage = default!;

    private SoapEnvelope ResponseEnvelope;
    private HttpResponseMessage soapRequestResponse = default!;

    private SoapXmlSerializer sxmls = new(XmlSettings.Soap);

    private string? homeCommunityId;
    private string? repositoryUniqueId;
    private string? documentUniqueId;

    protected override async void OnInitialized()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        homeCommunityId = queryParams["HomeCommunityId"];
        repositoryUniqueId = queryParams["RepositoryUniqueId"];
        documentUniqueId = queryParams["DocumentUniqueId"];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        PreloadService.Show(loadingText: "Fetching Document " + documentUniqueId);
        var soapEnvelope = new SoapEnvelope()
        {
            Header = new()
            {
                Action = Constants.Xds.OperationContract.Iti43Action,
                MessageId = Guid.NewGuid().ToString(),
                To = backendUrl ?? inputBackendUrl.Placeholder
            },
            Body = new()
            {
                RetrieveDocumentSetRequest = new()
                {
                    DocumentRequest = [ new(){ HomeCommunityId = homeCommunityId, RepositoryUniqueId = repositoryUniqueId, DocumentUniqueId = documentUniqueId} ]
                }
            }
        };

        requestMessage = sxmls.SerializeSoapMessageToXmlString(soapEnvelope).Content;
        try
        {
            var soapRequest = await sxmls.DeserializeSoapMessageAsync<SoapEnvelope>(requestMessage);
        }
        catch (Exception ex)
        {

        }

        if (string.IsNullOrEmpty(backendUrl))
        {
            backendUrl = inputBackendUrl.Placeholder;
        }

        var content = new StringContent(requestMessage, System.Text.Encoding.UTF8, "application/soap+xml");
        var soapRequestResponse = await httpClient.PostAsync($"{backendUrl}", content);

        try
        {
            if (soapRequestResponse.IsSuccessStatusCode)
            {
                var responseStream = await soapRequestResponse.Content.ReadAsStreamAsync();
                ResponseEnvelope = await sxmls.DeserializeSoapMessageAsync<SoapEnvelope>(responseStream);

                // RegistryObjectList = responseMessage.Body.AdhocQueryResponse.RegistryObjectList.ToList();
            }
            else
            {
                var responseStream = await soapRequestResponse.Content.ReadAsStreamAsync();
                ResponseEnvelope = await sxmls.DeserializeSoapMessageAsync<SoapEnvelope>(responseStream);
            }
        }
        catch (Exception ex)
        {
            return;
        }

        PreloadService.Hide();
    }
}
