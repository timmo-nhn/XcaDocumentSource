@typeparam T

<div class="position-relative">
    <input type="text"
           class="form-control"
           value="@InputText"
           @oninput="OnInput"
           @onfocus="() => ShowDropdown = true"
           @onblur="()=> Task.Delay(200).ContinueWith(_ => ShowDropdown = false)">

    @if (ShowDropdown && FilteredOptions.Any())
    {
        <ul class="dropdown-menu show w-100" style="max-height: 200px; overflow-y: auto;">
            @foreach (var item in FilteredOptions)
            {
                <li>
                    <a class="dropdown-item" @onclick="() => SelectItem(item)">@item.Label</a>
                </li>
            }
        </ul>
    }
</div>

@code {
    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public List<DropdownItem<T>> Options { get; set; } = new();

    private List<DropdownItem<T>> FilteredOptions = new();
    private string InputText = "";
    private bool ShowDropdown = false;

    protected override void OnInitialized()
    {
        if (Value != null)
        {
            var match = Options.FirstOrDefault(o => EqualityComparer<T>.Default.Equals(o.Value, Value));
            InputText = match?.Label ?? "";
        }
        FilteredOptions = Options;
    }

    private void OnInput(ChangeEventArgs e)
    {
        InputText = e.Value?.ToString() ?? "";
        FilteredOptions = Options
            .Where(opt => opt.Label.Contains(InputText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task SelectItem(DropdownItem<T> selectedItem)
    {
        Value = selectedItem.Value;
        InputText = selectedItem.Label;
        ShowDropdown = false;
        await ValueChanged.InvokeAsync(Value);
    }
}
