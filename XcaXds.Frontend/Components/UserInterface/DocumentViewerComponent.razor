
@using System.Text
@using System.Xml.Xsl
@using System.Xml
@using XcaXds.Commons.Models;
@using XcaXds.Commons.Models.Soap.XdsTypes;
@using XcaXds.Commons.Models.Soap;

<div>
    @if (DocumentResponse.MimeType == "application/octet-stream")
    {
        <span>@htmlOutput</span>
    }
    else if (DocumentResponse.MimeType == "application/pdf")
    {
        <iframe 
        class="mb-3" 
        src="@($"data:{DocumentResponse.MimeType};headers=filename%3D{DocumentResponse.DocumentUniqueId};base64,{base64Content}")" 
        name="@DocumentResponse.DocumentUniqueId" 
        title="@DocumentResponse.DocumentUniqueId" 
        width="100%" 
        height="600px">
        </iframe>
    }
    else if (DocumentResponse.MimeType == "text/plain")
    {
        @*         <p>@System.Text.Encoding.UTF8.GetString((byte[])DocumentResponse.DocumentOrInclude)</p>
 *@    }
    else if (DocumentResponse.MimeType != null && DocumentResponse.MimeType.Contains("image"))
    {
        <img base Class="mb-3" src="@($"data:{DocumentResponse.MimeType};base64,{base64Content}")" />
    }
    else
    {
        <span>@documentTextContent</span>
    }
</div>

@code {
    [Parameter]
    public DocumentResponseType DocumentResponse { get; set; } = default!;

    private string htmlOutput;

    private string base64Content;
    private string documentTextContent;

    protected override void OnParametersSet()
    {
        Console.WriteLine($"DocumentResponse: {DocumentResponse}");
        if (DocumentResponse?.Document.Value != null)
        {
            base64Content = DocumentResponse.Document.Value;
            documentTextContent = DocumentResponse.Document.Value;
        }
    }             

    public async Task Keep()
    {
        var xslt = new XslCompiledTransform();
        xslt.Load("your-transform.xslt");

        using var sw = new StringWriter();
        using var xw = XmlWriter.Create(sw);
        xslt.Transform(documentTextContent, xw);
        htmlOutput = sw.ToString();

    }


}
