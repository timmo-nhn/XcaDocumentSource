@inject IJSRuntime JS

<Button @onclick="OnClick" Color="@Color" Class="@Class" Style="@Style">
    @if (isCopied)
    {
        @ClickedIcon
    }
    else
    {
        @NormalIcon
    }
</Button>

@code {
    [Parameter] 
    public string? TextToCopy { get; set; }

    [Parameter] 
    public EventCallback OnCopied { get; set; }

    [Parameter] 
    public RenderFragment? NormalIcon { get; set; }

    [Parameter] 
    public RenderFragment? ClickedIcon { get; set; }

    [Parameter] 
    public ButtonColor Color { get; set; } = ButtonColor.Primary;

    [Parameter] 
    public string? Class { get; set; }

    [Parameter] 
    public string? Style { get; set; }

    private bool isCopied;

    private async Task OnClick()
    {
        if (!string.IsNullOrEmpty(TextToCopy))
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", TextToCopy);

            isCopied = true;
            StateHasChanged();

            if (OnCopied.HasDelegate)
            {
                await OnCopied.InvokeAsync(null);
            }

            await Task.Delay(2000);
            isCopied = false;
            StateHasChanged();
        }
    }
}
