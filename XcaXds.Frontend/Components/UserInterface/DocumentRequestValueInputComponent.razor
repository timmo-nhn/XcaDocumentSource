@using XcaXds.Commons.Models;
@using XcaXds.Commons.Models.Custom
@using XcaXds.Commons.Models.Soap.XdsTypes

<div class="listvalue-container">
    @if (ListValueInputs != null && ListValueInputs.Count != 0)
    {
        @foreach (var childValueLists in ListValueInputs)
        {
            <div class="form-group value-list">
                <InputText class="form-control mb-2"
                @bind-Value="childValueLists.DocumentRequest.DocumentUniqueId"
                @onblur="() => OnBlur(childValueLists)"
                placeholder="Document Unique Id" />

                <InputText class="form-control mb-2"
                @bind-Value="childValueLists.DocumentRequest.RepositoryUniqueId"
                @onblur="() => OnBlur(childValueLists)"
                placeholder="Repository Id" />

                <InputText class="form-control mb-2"
                @bind-Value="childValueLists.DocumentRequest.HomeCommunityId"
                @onblur="() => OnBlur(childValueLists)"
                placeholder="Home Community Id" />

                <button class="btn btn-danger" @onclick="() => RemoveKeyValuePair(childValueLists.Id)">
                    <Icon Name="IconName.DashCircle" />
                </button>
            </div>
        }
    }
</div>

<style>
    .listvalue-container {
    container-type: inline-size;
    }

    .value-list {
    display: flex;
    align-items: baseline;
    padding: 1px;
    margin: 1px;
    flex-wrap: nowrap;
    }

    @@container (max-width: 400px) {
    .value-list {
    flex-direction: column;
    align-items: stretch;
    }

    .autocomplete {
    width: unset;
    }
    }
</style>

@code {
    
    [Parameter]
    public XdsConfig XdsConfig { get; set; }

    [Parameter]
    public List<DocumentRequestValuesInput> ListValueInputs { get; set; }

    [Parameter]
    public EventCallback<List<DocumentRequestValuesInput>> OnValueListChanged { get; set; }

    private void OnInput(ChangeEventArgs e)
    {
        var value = e?.Value?.ToString();
        Console.WriteLine($"Input changed: {value}");
    }

    private void OnBlur(DocumentRequestValuesInput documentRequest)
    {
        var entry = ListValueInputs.FirstOrDefault(e => e.Id == documentRequest.Id);
        if (entry == null || entry.DocumentRequest == null) return;



        entry.DocumentRequest.DocumentUniqueId = documentRequest.DocumentRequest.DocumentUniqueId;
        entry.DocumentRequest.RepositoryUniqueId = documentRequest.DocumentRequest.RepositoryUniqueId;
        entry.DocumentRequest.HomeCommunityId = documentRequest.DocumentRequest.HomeCommunityId;

        if (!string.IsNullOrWhiteSpace(entry.DocumentRequest.DocumentUniqueId))
        {
            entry.DocumentRequest.RepositoryUniqueId = string.IsNullOrWhiteSpace(entry.DocumentRequest.RepositoryUniqueId) ? XdsConfig.RepositoryUniqueId : entry.DocumentRequest.RepositoryUniqueId;
            entry.DocumentRequest.HomeCommunityId = string.IsNullOrWhiteSpace(entry.DocumentRequest.HomeCommunityId) ? XdsConfig.HomeCommunityId : entry.DocumentRequest.HomeCommunityId;
        }

        if (entry.DocumentRequest == null || string.IsNullOrWhiteSpace(documentRequest.DocumentRequest.DocumentUniqueId)) return;

        if (ListValueInputs.All(value => !string.IsNullOrWhiteSpace(value.DocumentRequest.DocumentUniqueId)))
        {
            ListValueInputs.Add(new DocumentRequestValuesInput());
            OnValueListChanged.InvokeAsync(ListValueInputs);
            StateHasChanged();
        }
    }

    private void RemoveKeyValuePair(Guid id)
    {
        ListValueInputs.RemoveAll(e => e.Id == id);
        if (!ListValueInputs.Any())
        {
            ListValueInputs.Add(new DocumentRequestValuesInput());
        }

        OnValueListChanged.InvokeAsync(ListValueInputs);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        ListValueInputs ??= new List<DocumentRequestValuesInput> { new DocumentRequestValuesInput() };

        OnValueListChanged.InvokeAsync(ListValueInputs);
    }
}